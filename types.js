/**
 * Autogenerated; do not edit! Run "npm gen-types" to regenerate.
 */
import {buildUnionCaseClass, buildValueClass} from './types-lib'

export const State = buildValueClass('State', ['canvasExpressions', 'nextExprId', 'canvasDefinitions', 'definitions', 'pendingResults', 'activeDrags', 'highlightedExprs', 'highlightedEmptyBodies']);
export const Reset = buildUnionCaseClass('reset', []);
export const AddExpression = buildUnionCaseClass('addExpression', ['canvasExpr']);
export const PlaceDefinition = buildUnionCaseClass('placeDefinition', ['defName', 'screenPos']);
export const MoveExpression = buildUnionCaseClass('moveExpression', ['exprId', 'pos']);
export const DecomposeExpressionAction = buildUnionCaseClass('decomposeExpressionAction', ['path', 'targetPos']);
export const InsertAsArg = buildUnionCaseClass('insertAsArg', ['argExprId', 'path']);
export const InsertAsBody = buildUnionCaseClass('insertAsBody', ['bodyExprId', 'path']);
export const EvaluateExpression = buildUnionCaseClass('evaluateExpression', ['exprId']);
export const PlacePendingResult = buildUnionCaseClass('placePendingResult', ['exprId', 'width', 'height']);
export const FingerDown = buildUnionCaseClass('fingerDown', ['fingerId', 'screenPos']);
export const FingerMove = buildUnionCaseClass('fingerMove', ['fingerId', 'screenPos']);
export const FingerUp = buildUnionCaseClass('fingerUp', ['fingerId', 'screenPos']);
export const Lambda = buildUnionCaseClass('lambda', ['varName', 'body']);
export const FuncCall = buildUnionCaseClass('funcCall', ['func', 'arg']);
export const Variable = buildUnionCaseClass('variable', ['varName']);
export const EvalLambda = buildUnionCaseClass('evalLambda', ['varMarker', 'originalVarName', 'body']);
export const EvalFuncCall = buildUnionCaseClass('evalFuncCall', ['func', 'arg']);
export const EvalBoundVariable = buildUnionCaseClass('evalBoundVariable', ['slot']);
export const EvalUnboundVariable = buildUnionCaseClass('evalUnboundVariable', ['varMarker', 'originalVarName']);
export const EvalFreeVariable = buildUnionCaseClass('evalFreeVariable', ['varName']);
export const UserLambda = buildUnionCaseClass('userLambda', ['varName', 'body']);
export const UserFuncCall = buildUnionCaseClass('userFuncCall', ['func', 'arg']);
export const UserVariable = buildUnionCaseClass('userVariable', ['varName']);
export const UserReference = buildUnionCaseClass('userReference', ['defName']);
export const CanvasExpression = buildValueClass('CanvasExpression', ['expr', 'pos']);
export const PendingResult = buildValueClass('PendingResult', ['expr', 'sourceExprId']);
export const DisplayState = buildValueClass('DisplayState', ['screenExpressions', 'screenDefinitions', 'measureRequests']);
export const MeasureRequest = buildValueClass('MeasureRequest', ['expr', 'resultHandler']);
export const ScreenDefinition = buildValueClass('ScreenDefinition', ['defName', 'expr', 'pos', 'key', 'isDragging']);
export const ScreenExpression = buildValueClass('ScreenExpression', ['expr', 'pos', 'key', 'isDragging', 'executeHandler']);
export const DisplayLambda = buildUnionCaseClass('displayLambda', ['exprKey', 'shouldHighlight', 'varKey', 'emptyBodyKey', 'shouldHighlightEmptyBody', 'varName', 'body']);
export const DisplayFuncCall = buildUnionCaseClass('displayFuncCall', ['exprKey', 'shouldHighlight', 'func', 'arg']);
export const DisplayVariable = buildUnionCaseClass('displayVariable', ['exprKey', 'shouldHighlight', 'varName']);
export const DisplayReference = buildUnionCaseClass('displayReference', ['exprKey', 'shouldHighlight', 'defName']);
export const CanvasPoint = buildValueClass('CanvasPoint', ['canvasX', 'canvasY']);
export const PointDifference = buildValueClass('PointDifference', ['dx', 'dy']);
export const ScreenPoint = buildValueClass('ScreenPoint', ['screenX', 'screenY']);
export const ScreenRect = buildValueClass('ScreenRect', ['topLeft', 'bottomRight']);
export const ExprPath = buildValueClass('ExprPath', ['container', 'pathSteps']);
export const ExprIdContainer = buildUnionCaseClass('exprIdContainer', ['exprId']);
export const DefinitionContainer = buildUnionCaseClass('definitionContainer', ['defName']);
export const PickUpExpression = buildUnionCaseClass('pickUpExpression', ['exprId', 'offset', 'screenRect']);
export const DecomposeExpression = buildUnionCaseClass('decomposeExpression', ['exprPath', 'offset', 'screenRect']);
export const CreateExpression = buildUnionCaseClass('createExpression', ['expr', 'offset', 'screenRect']);
export const StartPan = buildUnionCaseClass('startPan', ['startPos']);
export const DragData = buildValueClass('DragData', ['userExpr', 'grabOffset', 'screenRect']);
export const AddToTopLevelResult = buildUnionCaseClass('addToTopLevelResult', ['expr', 'screenPos']);
export const InsertAsBodyResult = buildUnionCaseClass('insertAsBodyResult', ['lambdaPath', 'expr']);
export const InsertAsArgResult = buildUnionCaseClass('insertAsArgResult', ['path', 'expr']);
export const RemoveResult = buildUnionCaseClass('removeResult', []);
export const ExpressionKey = buildUnionCaseClass('expressionKey', ['exprPath']);
export const EmptyBodyKey = buildUnionCaseClass('emptyBodyKey', ['lambdaPath']);
export const LambdaVarKey = buildUnionCaseClass('lambdaVarKey', ['lambdaPath']);
export const DefinitionKey = buildUnionCaseClass('definitionKey', ['defName']);
