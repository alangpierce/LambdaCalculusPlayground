/**
 * Autogenerated; do not edit! Run "npm gen-types" to regenerate.
 *
 * This is a bit of a hack: WebStorm doesn't full recognize all Flow types, but
 * it matches types by name, so we can refine types to be more WebStorm-friendly
 * by including this file in the project.
 */

type Action = {
    match<T>(visitor: {
        reset(reset: Reset): T,
        addExpression(addExpression: AddExpression): T,
        placeDefinition(placeDefinition: PlaceDefinition): T,
        moveExpression(moveExpression: MoveExpression): T,
        decomposeExpressionAction(decomposeExpressionAction: DecomposeExpressionAction): T,
        insertAsArg(insertAsArg: InsertAsArg): T,
        insertAsBody(insertAsBody: InsertAsBody): T,
        evaluateExpression(evaluateExpression: EvaluateExpression): T,
        placePendingResult(placePendingResult: PlacePendingResult): T,
        fingerDown(fingerDown: FingerDown): T,
        fingerMove(fingerMove: FingerMove): T,
        fingerUp(fingerUp: FingerUp): T,
    }): T,
};

type Expression = {
    match<T>(visitor: {
        lambda(lambda: Lambda): T,
        funcCall(funcCall: FuncCall): T,
        variable(variable: Variable): T,
    }): T,
};

type EvalExpression = {
    match<T>(visitor: {
        evalLambda(evalLambda: EvalLambda): T,
        evalFuncCall(evalFuncCall: EvalFuncCall): T,
        evalBoundVariable(evalBoundVariable: EvalBoundVariable): T,
        evalUnboundVariable(evalUnboundVariable: EvalUnboundVariable): T,
        evalFreeVariable(evalFreeVariable: EvalFreeVariable): T,
    }): T,
};

type UserExpression = {
    match<T>(visitor: {
        userLambda(userLambda: UserLambda): T,
        userFuncCall(userFuncCall: UserFuncCall): T,
        userVariable(userVariable: UserVariable): T,
        userReference(userReference: UserReference): T,
    }): T,
};

type DisplayExpression = {
    match<T>(visitor: {
        displayLambda(displayLambda: DisplayLambda): T,
        displayFuncCall(displayFuncCall: DisplayFuncCall): T,
        displayVariable(displayVariable: DisplayVariable): T,
        displayReference(displayReference: DisplayReference): T,
    }): T,
};

type ExprContainer = {
    match<T>(visitor: {
        exprIdContainer(exprIdContainer: ExprIdContainer): T,
        definitionContainer(definitionContainer: DefinitionContainer): T,
    }): T,
};

type DragResult = {
    match<T>(visitor: {
        pickUpExpression(pickUpExpression: PickUpExpression): T,
        pickUpDefinition(pickUpDefinition: PickUpDefinition): T,
        extractDefinition(extractDefinition: ExtractDefinition): T,
        decomposeExpression(decomposeExpression: DecomposeExpression): T,
        createExpression(createExpression: CreateExpression): T,
        startPan(startPan: StartPan): T,
    }): T,
};

type DragPayload = {
    match<T>(visitor: {
        draggedExpression(draggedExpression: DraggedExpression): T,
        draggedDefinition(draggedDefinition: DraggedDefinition): T,
    }): T,
};

type DropResult = {
    match<T>(visitor: {
        addToTopLevelResult(addToTopLevelResult: AddToTopLevelResult): T,
        insertAsBodyResult(insertAsBodyResult: InsertAsBodyResult): T,
        insertAsArgResult(insertAsArgResult: InsertAsArgResult): T,
        insertAsDefinitionResult(insertAsDefinitionResult: InsertAsDefinitionResult): T,
        removeResult(removeResult: RemoveResult): T,
    }): T,
};

type ViewKey = {
    match<T>(visitor: {
        expressionKey(expressionKey: ExpressionKey): T,
        emptyBodyKey(emptyBodyKey: EmptyBodyKey): T,
        lambdaVarKey(lambdaVarKey: LambdaVarKey): T,
        definitionKey(definitionKey: DefinitionKey): T,
        definitionRefKey(definitionRefKey: DefinitionRefKey): T,
        definitionEmptyBodyKey(definitionEmptyBodyKey: DefinitionEmptyBodyKey): T,
    }): T,
};

